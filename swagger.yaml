openapi: 3.0.0
info:
  title: D-Link - API - Product Images
  description: |
    This API primarily provides a facility to retrieve 
    image urls associated with a D-Link product code.
    A product code may have none, one or many images 
    available. Therefore image url retrieval can optionally be 
    filtered on keywords such as 'left', 'right' or a combination e.g. 
    'front middle left'. 
servers:
  - url: http://jdocker01.dlinkjde.int:8080/api/v1/productimages
paths:
  /ping:
    get: 
      summary: | 
        Pings this API for a simple OK response.
      description: |
        Simple API call, no parameters, quickly check your code 
        can connect with this API and get a response back.
      produces:
      - "application/json"
      responses:
        '200':    # status code
          description: A JSON object with success and a mesage with 'OK'.
  /products:
    get:
      summary: |
        Returns a unique list of Products for which image urls are 
        available.
      description: | 
        Returns a distinct list of product codes stored in this 
        system. Each entry will have 1 or more image urls associated with 
        it.
        Optionally filter by Product code to check if a Product has any
        images available.
      produces:
      - "application/json"
      responses:
        '200':    # status code
          description: A JSON array of product codes
  /images:
    get:
      summary: Returns a list of image urls available for a Product code.
      description: |
        Pass a Product code for a list of all available image urls 
        stored in the system.
        Optionally filter this list by providing one or word filter words
        for example 'left' or 'front left' 
      produces:
      - "application/json"
      responses:
        '200':    # status code
          description: A JSON array of image urls
    post:
      summary: Add a new Image entry with Product code and defining meta keywords such as 'left' or 'front left'.
      description: |
        Pass a Product code, image url and one or more meta keyword tags e.g. left or front to describe the image.
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "Image object that needs to be added"
        schema:
          $ref: "#/definitions/Images"
      responses:
        '201':
          description: "Created"  
        '409':   
          description: "Duplicate key value - Entry already exists."  
        '422':   
          description: "Missing parameter value etc."  
          description: A JSON array of image urls
  /images/{id}:
    put:
      summary: Updates an image entry by Id.
      description: |
        Pass a Product code for a list of all available image urls 
        stored in the system.
        Optionally filter this list by providing one or word filter words
        for example 'left' or 'front left' 
      parameters:
      - name: "id"
        in: "path"
        description: "Id of product/image entry you want to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updates to images object"
        required: true
        schema:
          $ref: "#/definitions/Images"
      responses:
        '200':    # status code
          description: A JSON array of image urls
    delete:
      summary: Deletes an image entry by Id.
      description: |
        Pass a Product code for a list of all available image urls 
        stored in the system.
        Optionally filter this list by providing one or word filter words
        for example 'left' or 'front left' 
      parameters:
      - name: "id"
        in: "path"
        description: "Id of product/image entry you want to update"
        required: true
        type: "string"
      responses:
        '200':
          description: A JSON array of image urls
definitions:
  Images:
    type: "Object"
    properties:
      id:
        typs: "integer"
        format: "int64"
      product:
        type: "string"
      url:
        type: "string"
      meta:
        type: "string"
    json:
      name: "Images"
